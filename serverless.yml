service: ${opt:app}

provider:
  name: aws
  stage: ${opt:stage, 'v1'}
  region: eu-west-1
  runtime: nodejs10.x

package:
  individually: true
  exclude:
    - node_modules/**
    - config.yml
    - package-lock.json
    - README.md
    - models/**
    - templates/**
    - .vscode/**
    - .git**

functions:
  - ${file(authorizers/auth.yml)}
  - ${file(functions/cognito/cognito.yml)}
  # Define all endpoints needed for the app
  - getResource:
      handler: functions/resource.getResource
      description: Retrieve resources to display
      role: ${file(config.yml):lambdaArn}
      name: getResource
      events:
        - http:
            integration: lambda
            path: /resource
            method: get
            cors:
              origin: '*'
              headers: 
                - Content-Type
                - Authorization
                - X-Api-Key
                - X-User
              methods:
                - GET
                - OPTIONS
            private: true
            headers:
              - Content-Type
              - Authorization
              - X-Api-Key
              - X-User
            authorizer:
              name: appAuthorizer
              identitySource: method.request.header.X-Api-Key
              resultTtlInSeconds: 0
              type: request
            request:
              headers:
                Content-Type: true
                X-Api-Key: true
              parameters:
                querystrings:
                  pg: false
              template:
                application/json: ${file(templates/MethodRequestPassthrough)}
              passThrough: WHEN_NO_TEMPLATES
            response:
              headers:
                Access-Control-Allow-Origin: "'*'"
              statusCodes:
                200:
                  pattern: '' # Default response method
                400:
                  pattern: '.*Invalid.*'
                  template: ${file(templates/ErrorResponse)}
                403:
                  pattern: '.*Forbidden.*'
                  template: ${file(templates/ErrorResponse)}
                404:
                  pattern: '.*Not Found.*'
                  template: ${file(templates/ErrorResponse)}
      package:
        include:
          - functions/banks.js
        exclude:
          - functions/*.yml
          - functions/cognito/**
          - authorizers/**

resources:
  Resources:
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        Name: ${opt:app}AppApi
    CognitoUserPoolAppPool:
      Type: AWS::Cognito::UserPool
      Properties:
        UserPoolName: ${opt:app}AppUserPool
        UsernameAttributes:
          - email
        AutoVerifiedAttributes:
          - email
    AppPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        # Generate an app client name based on the stage
        ClientName: ${opt:app}AppUserPoolClient
        UserPoolId:
          Ref: CognitoUserPoolAppPool
        ExplicitAuthFlows:
          - ADMIN_NO_SRP_AUTH
        GenerateSecret: false
    AppIdentityPool:
      Type: AWS::Cognito::IdentityPool
      Properties:
        IdentityPoolName: ${opt:app}AppIdPool
        AllowUnauthenticatedIdentities: false
        CognitoIdentityProviders:
          - ClientId:
              Ref: AppPoolClient
            ProviderName:
              Fn::GetAtt: [ "CognitoUserPoolAppPool", "ProviderName" ]

    CognitoIdentityPoolRoles:
      Type: AWS::Cognito::IdentityPoolRoleAttachment
      Properties:
        IdentityPoolId:
          Ref: AppIdentityPool
        Roles:
          authenticated:
            Fn::GetAtt: [CognitoAuthRole, Arn]
          unauthenticated:
            Fn::GetAtt: [CognitoUnAuthRole, Arn]

    CognitoUnAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: AppIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': unauthenticated
        Policies:
          - PolicyName: 'OpAppUnuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                  Resource: '*'

    CognitoAuthRole:
      Type: AWS::IAM::Role
      Properties:
        Path: /
        AssumeRolePolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Principal:
                Federated: 'cognito-identity.amazonaws.com'
              Action:
                - 'sts:AssumeRoleWithWebIdentity'
              Condition:
                StringEquals:
                  'cognito-identity.amazonaws.com:aud':
                    Ref: AppIdentityPool
                'ForAnyValue:StringLike':
                  'cognito-identity.amazonaws.com:amr': authenticated
        Policies:
          - PolicyName: 'OpAppAuthorizedPolicy'
            PolicyDocument:
              Version: '2012-10-17'
              Statement:
                - Effect: 'Allow'
                  Action:
                    - 'mobileanalytics:PutEvents'
                    - 'cognito-sync:*'
                    - 'cognito-identity:*'
                  Resource: '*'
                  
    AppTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${opt:app}AppKey
        AttributeDefinitions:
          - AttributeName: user
            AttributeType: S
        KeySchema:
          - AttributeName: user
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
    AppUsagePlan:
      Type: AWS::ApiGateway::UsagePlan
      Properties:
        ApiStages:
        - ApiId:
            Ref: ApiGatewayRestApi
          Stage: ${opt:stage, 'v1'}
        Description: ${opt:app} app usage plan
        UsagePlanName: ${opt:app}AppUsagePlan

outputs:
  UserPoolId:
    Value:
      Ref: CognitoUserPoolAppPool
  UserPoolClientId:
    Value:
      Ref: AppPoolClient


